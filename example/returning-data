#!/usr/bin/env bash

cd "${0%/*}" || exit 1

# shellcheck disable=SC1091
. ../libbench

echoData() {
    echo "This is data"
}

# Pro: A lot of things send data to stdout or stderr.
# Con: Difficult to ensure that commands don't accidentally output additional
#      lines of data.
bench::test::subshell() {
    local x
    x=$(echoData)
}

assignData() {
    local "${1-}" && assign::value "$1" "This is data"
}

# Pro: Assigns data to any variable.
# Pro: No variable conflicts.
# Con: Only moderate speed.
bench::test::assign() {
    local x
    assignData x
}

globalData() {
    retval="This is data"
}

# Pro: Fastest.
# Con: Uses a global variable, which could be problematic if any other
#      library function wishes to use the same variable.
bench::test::global-variable() {
    local x
    globalData

    # shellcheck disable=SC2034
    x=$retval
}

evalData() {
    eval "$1='This is data'"
}

# Pro: Fairly fast.
# Con: Returned variable name may conflict with variables in callee.
bench::test::eval() {
    # shellcheck disable=SC2034
    local x
    evalData x
}

printfData() {
    printf -v "$1" "This is data"
}

# Pro: Fairly fast.
# Con: Returned variable name may conflict with variables in callee.
bench::test::printf() {
    # shellcheck disable=SC2034
    local x
    printfData x
}

bench::auto
